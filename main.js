/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/python-shell/index.js
var require_python_shell = __commonJS({
  "node_modules/python-shell/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PythonShell = exports.NewlineTransformer = exports.PythonShellError = void 0;
    var events_1 = require("events");
    var child_process_1 = require("child_process");
    var os_1 = require("os");
    var path_1 = require("path");
    var stream_1 = require("stream");
    var fs_1 = require("fs");
    var util_1 = require("util");
    function toArray(source) {
      if (typeof source === "undefined" || source === null) {
        return [];
      } else if (!Array.isArray(source)) {
        return [source];
      }
      return source;
    }
    function extend(obj, ...args) {
      Array.prototype.slice.call(arguments, 1).forEach(function(source) {
        if (source) {
          for (let key in source) {
            obj[key] = source[key];
          }
        }
      });
      return obj;
    }
    function getRandomInt() {
      return Math.floor(Math.random() * 1e10);
    }
    var execPromise = (0, util_1.promisify)(child_process_1.exec);
    var PythonShellError = class extends Error {
    };
    exports.PythonShellError = PythonShellError;
    var NewlineTransformer = class extends stream_1.Transform {
      _transform(chunk, encoding, callback) {
        let data = chunk.toString();
        if (this._lastLineData)
          data = this._lastLineData + data;
        const lines = data.split(os_1.EOL);
        this._lastLineData = lines.pop();
        lines.forEach(this.push.bind(this));
        callback();
      }
      _flush(done) {
        if (this._lastLineData)
          this.push(this._lastLineData);
        this._lastLineData = null;
        done();
      }
    };
    exports.NewlineTransformer = NewlineTransformer;
    var PythonShell2 = class extends events_1.EventEmitter {
      constructor(scriptPath, options, stdoutSplitter = null, stderrSplitter = null) {
        super();
        function resolve(type, val) {
          if (typeof val === "string") {
            return PythonShell2[type][val];
          } else if (typeof val === "function") {
            return val;
          }
        }
        if (scriptPath.trim().length == 0)
          throw Error("scriptPath cannot be empty! You must give a script for python to run");
        let self = this;
        let errorData = "";
        events_1.EventEmitter.call(this);
        options = extend({}, PythonShell2.defaultOptions, options);
        let pythonPath;
        if (!options.pythonPath) {
          pythonPath = PythonShell2.defaultPythonPath;
        } else
          pythonPath = options.pythonPath;
        let pythonOptions = toArray(options.pythonOptions);
        let scriptArgs = toArray(options.args);
        this.scriptPath = (0, path_1.join)(options.scriptPath || "", scriptPath);
        this.command = pythonOptions.concat(this.scriptPath, scriptArgs);
        this.mode = options.mode || "text";
        this.formatter = resolve("format", options.formatter || this.mode);
        this.parser = resolve("parse", options.parser || this.mode);
        this.stderrParser = resolve("parse", options.stderrParser || "text");
        this.terminated = false;
        this.childProcess = (0, child_process_1.spawn)(pythonPath, this.command, options);
        ["stdout", "stdin", "stderr"].forEach(function(name) {
          self[name] = self.childProcess[name];
          self.parser && self[name] && self[name].setEncoding(options.encoding || "utf8");
        });
        if (this.parser && this.stdout) {
          if (!stdoutSplitter)
            stdoutSplitter = new NewlineTransformer();
          stdoutSplitter.setEncoding(options.encoding || "utf8");
          this.stdout.pipe(stdoutSplitter).on("data", (chunk) => {
            this.emit("message", self.parser(chunk));
          });
        }
        if (this.stderrParser && this.stderr) {
          if (!stderrSplitter)
            stderrSplitter = new NewlineTransformer();
          stderrSplitter.setEncoding(options.encoding || "utf8");
          this.stderr.pipe(stderrSplitter).on("data", (chunk) => {
            this.emit("stderr", self.stderrParser(chunk));
          });
        }
        if (this.stderr) {
          this.stderr.on("data", function(data) {
            errorData += "" + data;
          });
          this.stderr.on("end", function() {
            self.stderrHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self.stderrHasEnded = true;
        }
        if (this.stdout) {
          this.stdout.on("end", function() {
            self.stdoutHasEnded = true;
            terminateIfNeeded();
          });
        } else {
          self.stdoutHasEnded = true;
        }
        this.childProcess.on("error", function(err) {
          self.emit("error", err);
        });
        this.childProcess.on("exit", function(code, signal) {
          self.exitCode = code;
          self.exitSignal = signal;
          terminateIfNeeded();
        });
        function terminateIfNeeded() {
          if (!self.stderrHasEnded || !self.stdoutHasEnded || self.exitCode == null && self.exitSignal == null)
            return;
          let err;
          if (self.exitCode && self.exitCode !== 0) {
            if (errorData) {
              err = self.parseError(errorData);
            } else {
              err = new PythonShellError("process exited with code " + self.exitCode);
            }
            err = extend(err, {
              executable: pythonPath,
              options: pythonOptions.length ? pythonOptions : null,
              script: self.scriptPath,
              args: scriptArgs.length ? scriptArgs : null,
              exitCode: self.exitCode
            });
            if (self.listeners("pythonError").length || !self._endCallback) {
              self.emit("pythonError", err);
            }
          }
          self.terminated = true;
          self.emit("close");
          self._endCallback && self._endCallback(err, self.exitCode, self.exitSignal);
        }
        ;
      }
      static checkSyntax(code) {
        return __awaiter(this, void 0, void 0, function* () {
          const randomInt = getRandomInt();
          const filePath = (0, os_1.tmpdir)() + path_1.sep + `pythonShellSyntaxCheck${randomInt}.py`;
          const writeFilePromise = (0, util_1.promisify)(fs_1.writeFile);
          return writeFilePromise(filePath, code).then(() => {
            return this.checkSyntaxFile(filePath);
          });
        });
      }
      static getPythonPath() {
        return this.defaultOptions.pythonPath ? this.defaultOptions.pythonPath : this.defaultPythonPath;
      }
      static checkSyntaxFile(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
          const pythonPath = this.getPythonPath();
          let compileCommand = `${pythonPath} -m py_compile ${filePath}`;
          return execPromise(compileCommand);
        });
      }
      static run(scriptPath, options, callback) {
        let pyshell = new PythonShell2(scriptPath, options);
        let output = [];
        return pyshell.on("message", function(message) {
          output.push(message);
        }).end(function(err) {
          return callback(err ? err : null, output.length ? output : null);
        });
      }
      static runString(code, options, callback) {
        const randomInt = getRandomInt();
        const filePath = os_1.tmpdir + path_1.sep + `pythonShellFile${randomInt}.py`;
        (0, fs_1.writeFileSync)(filePath, code);
        return PythonShell2.run(filePath, options, callback);
      }
      static getVersion(pythonPath) {
        if (!pythonPath)
          pythonPath = this.getPythonPath();
        return execPromise(pythonPath + " --version");
      }
      static getVersionSync(pythonPath) {
        if (!pythonPath)
          pythonPath = this.getPythonPath();
        return (0, child_process_1.execSync)(pythonPath + " --version").toString();
      }
      parseError(data) {
        let text = "" + data;
        let error;
        if (/^Traceback/.test(text)) {
          let lines = text.trim().split(os_1.EOL);
          let exception = lines.pop();
          error = new PythonShellError(exception);
          error.traceback = data;
          error.stack += os_1.EOL + "    ----- Python Traceback -----" + os_1.EOL + "  ";
          error.stack += lines.slice(1).join(os_1.EOL + "  ");
        } else {
          error = new PythonShellError(text);
        }
        return error;
      }
      send(message) {
        if (!this.stdin)
          throw new Error("stdin not open for writing");
        let data = this.formatter ? this.formatter(message) : message;
        if (this.mode !== "binary")
          data += os_1.EOL;
        this.stdin.write(data);
        return this;
      }
      end(callback) {
        if (this.childProcess.stdin) {
          this.childProcess.stdin.end();
        }
        this._endCallback = callback;
        return this;
      }
      kill(signal) {
        this.terminated = this.childProcess.kill(signal);
        return this;
      }
      terminate(signal) {
        return this.kill(signal);
      }
    };
    exports.PythonShell = PythonShell2;
    PythonShell2.defaultPythonPath = process.platform != "win32" ? "python3" : "python";
    PythonShell2.defaultOptions = {};
    PythonShell2.format = {
      text: function toText(data) {
        if (!data)
          return "";
        else if (typeof data !== "string")
          return data.toString();
        return data;
      },
      json: function toJson(data) {
        return JSON.stringify(data);
      }
    };
    PythonShell2.parse = {
      text: function asText(data) {
        return data;
      },
      json: function asJson(data) {
        return JSON.parse(data);
      }
    };
  }
});

// main.ts
__export(exports, {
  default: () => MatrixOperationsPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var import_python_shell = __toModule(require_python_shell());
var DEFAULT_SETTINGS = {
  pythonPath: "",
  commands: ""
};
var MatrixOperationsPlugin = class extends import_obsidian.Plugin {
  run_pyshell() {
    var path = "";
    if (this.app.vault.adapter instanceof import_obsidian.FileSystemAdapter) {
      path = this.app.vault.adapter.getBasePath();
    }
    let pyshell_options = {
      mode: "json",
      parser: function(x) {
        try {
          return JSON.parse(x);
        } catch (e) {
          return JSON.stringify({ command: "null" });
        }
      },
      pythonPath: this.settings.pythonPath,
      scriptPath: path + "/.obsidian/plugins/obsidian-sample-plugin/src/",
      args: [this.settings.commands]
    };
    this.pyshell = new import_python_shell.PythonShell("main.py", pyshell_options);
    this.id = 1;
    this.editors = {};
    this.pyshell.on("message", (message) => {
      if (message.command) {
        let editor = this.editors[message.id];
        switch (message.command) {
          case "simplify":
            editor.replaceSelection(message.res);
            break;
          case "el_ops":
            editor.replaceSelection(message.res);
            break;
          case "transpose":
            editor.replaceSelection(message.res);
            break;
          case "inverse":
            editor.replaceSelection(message.res);
            break;
          case "ref":
            editor.replaceSelection(message.res);
            break;
          case "rref":
            editor.replaceSelection(message.res);
            break;
          case "matrix_info":
            new TextModal(this.app, message.res).open();
            break;
          case "error":
            new import_obsidian.Notice(message.res);
            break;
        }
        delete this.editors[message.id];
      }
    });
    this.addCommand({
      id: "simplify",
      name: "simplify",
      editorCallback: (editor, view) => {
        this.editors[this.id] = editor;
        let latex = editor.getSelection();
        console.log(JSON.stringify({ command: "simplify", text: latex, "id": this.id }));
        this.pyshell.send({ command: "simplify", text: latex, "id": this.id });
        this.id++;
      }
    });
    this.addCommand({
      id: "el_ops",
      name: "el_ops",
      editorCallback: (editor, view) => {
        this.editors[this.id] = editor;
        let latex = editor.getSelection();
        this.pyshell.send({ command: "el_ops", text: latex, "id": this.id });
        this.id++;
      }
    });
    this.addCommand({
      id: "matrix_info",
      name: "matrix_info",
      editorCallback: (editor, view) => {
        this.editors[this.id] = editor;
        let latex = editor.getSelection();
        this.pyshell.send({ command: "matrix_info", text: latex, "id": this.id });
        this.id++;
      }
    });
    this.addCommand({
      id: "inverse_matrix",
      name: "inverse_matrix",
      editorCallback: (editor, view) => {
        this.editors[this.id] = editor;
        let latex = editor.getSelection();
        this.pyshell.send({ command: "inverse", text: latex, "id": this.id });
        this.id++;
      }
    });
    this.addCommand({
      id: "transpose_matrix",
      name: "transpose_matrix",
      editorCallback: (editor, view) => {
        this.editors[this.id] = editor;
        let latex = editor.getSelection();
        this.pyshell.send({ command: "transpose", text: latex, "id": this.id });
        this.id++;
      }
    });
    this.addCommand({
      id: "ref",
      name: "ref",
      editorCallback: (editor, view) => {
        this.editors[this.id] = editor;
        let latex = editor.getSelection();
        this.pyshell.send({ command: "ref", text: latex, "id": this.id });
        this.id++;
      }
    });
    this.addCommand({
      id: "rref",
      name: "rref",
      editorCallback: (editor, view) => {
        this.editors[id] = editor;
        let latex = editor.getSelection();
        this.pyshell.send({ command: "rref", text: latex, "id": this.id });
        this.id++;
      }
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new SettingTab(this.app, this));
      this.run_pyshell();
    });
  }
  onunload() {
    this.pyshell.kill();
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var TextModal = class extends import_obsidian.Modal {
  constructor(app, message) {
    super(app);
    this.message = "";
    this.message = message;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText(this.message);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Matrix Calculator - Settings" });
    new import_obsidian.Setting(containerEl).setName("Python path").setDesc("Path to your python3 file with required packages (see README.md)").addText((text) => text.setPlaceholder("path").setValue(this.plugin.settings.pythonPath).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.pythonPath = value;
      yield this.plugin.saveSettings();
      this.plugin.pyshell.kill();
      this.plugin.run_pyshell();
    })));
    new import_obsidian.Setting(containerEl).setName("Command file").setDesc("Path to file with your custom LaTeX commands (\\newcommand)").addText((text) => text.setPlaceholder("path").setValue(this.plugin.settings.commands).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.commands = value;
      yield this.plugin.saveSettings();
      this.plugin.pyshell.kill();
      this.plugin.run_pyshell();
    })));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3B5dGhvbi1zaGVsbC9pbmRleC50cyIsICJtYWluLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogW251bGwsICJpbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBNb2RhbCwgTm90aWNlLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFZhdWx0LCBGaWxlU3lzdGVtQWRhcHRlciB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgUHl0aG9uU2hlbGwgfSBmcm9tICdweXRob24tc2hlbGwnO1xyXG5cclxuXHJcbmludGVyZmFjZSBNYXRyaXhPcGVyYXRpb25zU2V0dGluZ3Mge1xyXG5cdHB5dGhvblBhdGg6IHN0cmluZztcclxuXHRjb21tYW5kczogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBNYXRyaXhPcGVyYXRpb25zU2V0dGluZ3MgPSB7XHJcblx0cHl0aG9uUGF0aDogJycsXHJcblx0Y29tbWFuZHM6ICcnXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdHJpeE9wZXJhdGlvbnNQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBNYXRyaXhPcGVyYXRpb25zU2V0dGluZ3M7XHJcblx0cHlzaGVsbDogUHl0aG9uU2hlbGw7XHJcblx0aWQ6IDE7XHJcblx0ZWRpdG9yczoge307XHJcblxyXG5cdHJ1bl9weXNoZWxsKCkge1xyXG5cdFx0Ly8gR2V0dGluZyB2YXVsdCBwYXRoXHJcblx0XHR2YXIgcGF0aCA9IFwiXCJcclxuXHRcdGlmICh0aGlzLmFwcC52YXVsdC5hZGFwdGVyIGluc3RhbmNlb2YgRmlsZVN5c3RlbUFkYXB0ZXIpIHtcclxuXHRcdFx0cGF0aCA9IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZ2V0QmFzZVBhdGgoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXR0aW5nIHVwIHB5dGhvbiBzaGVsbFxyXG5cdFx0bGV0IHB5c2hlbGxfb3B0aW9ucyA9IHtcclxuXHRcdFx0bW9kZTogJ2pzb24nLFxyXG5cdFx0XHRwYXJzZXI6IGZ1bmN0aW9uICh4OiBhbnkpIHtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIEpTT04ucGFyc2UoeCk7XHJcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgY29tbWFuZDogJ251bGwnIH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0cHl0aG9uUGF0aDogdGhpcy5zZXR0aW5ncy5weXRob25QYXRoLFxyXG5cdFx0XHRzY3JpcHRQYXRoOiBwYXRoICsgJy8ub2JzaWRpYW4vcGx1Z2lucy9vYnNpZGlhbi1zYW1wbGUtcGx1Z2luL3NyYy8nLFxyXG5cdFx0XHRhcmdzOiBbdGhpcy5zZXR0aW5ncy5jb21tYW5kc11cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5weXNoZWxsID0gbmV3IFB5dGhvblNoZWxsKCdtYWluLnB5JywgcHlzaGVsbF9vcHRpb25zKTtcclxuXHJcblx0XHR0aGlzLmlkID0gMTtcclxuXHRcdHRoaXMuZWRpdG9ycyA9IHt9O1xyXG5cclxuXHRcdHRoaXMucHlzaGVsbC5vbignbWVzc2FnZScsIChtZXNzYWdlOiBvYmplY3QpID0+IHtcclxuXHRcdFx0aWYgKG1lc3NhZ2UuY29tbWFuZCkge1xyXG5cdFx0XHRcdGxldCBlZGl0b3IgPSB0aGlzLmVkaXRvcnNbbWVzc2FnZS5pZF07XHJcblx0XHRcdFx0c3dpdGNoIChtZXNzYWdlLmNvbW1hbmQpIHtcclxuXHRcdFx0XHRcdGNhc2UgJ3NpbXBsaWZ5JzogZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24obWVzc2FnZS5yZXMpOyBicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgJ2VsX29wcyc6IGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKG1lc3NhZ2UucmVzKTsgYnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICd0cmFuc3Bvc2UnOiBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihtZXNzYWdlLnJlcyk7IGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnaW52ZXJzZSc6IGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKG1lc3NhZ2UucmVzKTsgYnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICdyZWYnOiBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihtZXNzYWdlLnJlcyk7IGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAncnJlZic6IGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKG1lc3NhZ2UucmVzKTsgYnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICdtYXRyaXhfaW5mbyc6IG5ldyBUZXh0TW9kYWwodGhpcy5hcHAsIG1lc3NhZ2UucmVzKS5vcGVuKCk7IGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSAnZXJyb3InOiBuZXcgTm90aWNlKG1lc3NhZ2UucmVzKTsgYnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmVkaXRvcnNbbWVzc2FnZS5pZF07XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIFNldHRpbmcgdXAgY29tbWFuZHNcclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnc2ltcGxpZnknLFxyXG5cdFx0XHRuYW1lOiAnc2ltcGxpZnknLFxyXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcclxuXHRcdFx0XHR0aGlzLmVkaXRvcnNbdGhpcy5pZF0gPSBlZGl0b3I7XHJcblx0XHRcdFx0bGV0IGxhdGV4ID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHsgY29tbWFuZDogJ3NpbXBsaWZ5JywgdGV4dDogbGF0ZXgsICdpZCc6IHRoaXMuaWQgfSkpO1xyXG5cdFx0XHRcdHRoaXMucHlzaGVsbC5zZW5kKHsgY29tbWFuZDogJ3NpbXBsaWZ5JywgdGV4dDogbGF0ZXgsICdpZCc6IHRoaXMuaWQgfSk7XHJcblx0XHRcdFx0dGhpcy5pZCsrO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ2VsX29wcycsXHJcblx0XHRcdG5hbWU6ICdlbF9vcHMnLFxyXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcclxuXHRcdFx0XHR0aGlzLmVkaXRvcnNbdGhpcy5pZF0gPSBlZGl0b3I7XHJcblx0XHRcdFx0bGV0IGxhdGV4ID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cdFx0XHRcdHRoaXMucHlzaGVsbC5zZW5kKHsgY29tbWFuZDogJ2VsX29wcycsIHRleHQ6IGxhdGV4LCAnaWQnOiB0aGlzLmlkIH0pO1xyXG5cdFx0XHRcdHRoaXMuaWQrKztcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdtYXRyaXhfaW5mbycsXHJcblx0XHRcdG5hbWU6ICdtYXRyaXhfaW5mbycsXHJcblx0XHRcdGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xyXG5cdFx0XHRcdHRoaXMuZWRpdG9yc1t0aGlzLmlkXSA9IGVkaXRvcjtcclxuXHRcdFx0XHRsZXQgbGF0ZXggPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XHJcblx0XHRcdFx0dGhpcy5weXNoZWxsLnNlbmQoeyBjb21tYW5kOiAnbWF0cml4X2luZm8nLCB0ZXh0OiBsYXRleCwgJ2lkJzogdGhpcy5pZCB9KTtcclxuXHRcdFx0XHR0aGlzLmlkKys7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnaW52ZXJzZV9tYXRyaXgnLFxyXG5cdFx0XHRuYW1lOiAnaW52ZXJzZV9tYXRyaXgnLFxyXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcclxuXHRcdFx0XHR0aGlzLmVkaXRvcnNbdGhpcy5pZF0gPSBlZGl0b3I7XHJcblx0XHRcdFx0bGV0IGxhdGV4ID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cdFx0XHRcdHRoaXMucHlzaGVsbC5zZW5kKHsgY29tbWFuZDogJ2ludmVyc2UnLCB0ZXh0OiBsYXRleCwgJ2lkJzogdGhpcy5pZCB9KTtcclxuXHRcdFx0XHR0aGlzLmlkKys7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAndHJhbnNwb3NlX21hdHJpeCcsXHJcblx0XHRcdG5hbWU6ICd0cmFuc3Bvc2VfbWF0cml4JyxcclxuXHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB7XHJcblx0XHRcdFx0dGhpcy5lZGl0b3JzW3RoaXMuaWRdID0gZWRpdG9yO1xyXG5cdFx0XHRcdGxldCBsYXRleCA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKTtcclxuXHRcdFx0XHR0aGlzLnB5c2hlbGwuc2VuZCh7IGNvbW1hbmQ6ICd0cmFuc3Bvc2UnLCB0ZXh0OiBsYXRleCwgJ2lkJzogdGhpcy5pZCB9KTtcclxuXHRcdFx0XHR0aGlzLmlkKys7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAncmVmJyxcclxuXHRcdFx0bmFtZTogJ3JlZicsXHJcblx0XHRcdGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xyXG5cdFx0XHRcdHRoaXMuZWRpdG9yc1t0aGlzLmlkXSA9IGVkaXRvcjtcclxuXHRcdFx0XHRsZXQgbGF0ZXggPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XHJcblx0XHRcdFx0dGhpcy5weXNoZWxsLnNlbmQoeyBjb21tYW5kOiAncmVmJywgdGV4dDogbGF0ZXgsICdpZCc6IHRoaXMuaWQgfSk7XHJcblx0XHRcdFx0dGhpcy5pZCsrO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ3JyZWYnLFxyXG5cdFx0XHRuYW1lOiAncnJlZicsXHJcblx0XHRcdGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xyXG5cdFx0XHRcdHRoaXMuZWRpdG9yc1tpZF0gPSBlZGl0b3I7XHJcblx0XHRcdFx0bGV0IGxhdGV4ID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cdFx0XHRcdHRoaXMucHlzaGVsbC5zZW5kKHsgY29tbWFuZDogJ3JyZWYnLCB0ZXh0OiBsYXRleCwgJ2lkJzogdGhpcy5pZCB9KTtcclxuXHRcdFx0XHR0aGlzLmlkKys7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cdFx0dGhpcy5ydW5fcHlzaGVsbCgpO1xyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKSB7XHJcblx0XHR0aGlzLnB5c2hlbGwua2lsbCgpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgVGV4dE1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG5cdG1lc3NhZ2UgPSBcIlwiO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgbWVzc2FnZTogc3RyaW5nKSB7XHJcblx0XHRzdXBlcihhcHApO1xyXG5cdFx0dGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxuXHR9XHJcblxyXG5cdG9uT3BlbigpIHtcclxuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG5cdFx0Y29udGVudEVsLnNldFRleHQodGhpcy5tZXNzYWdlKTtcclxuXHR9XHJcblxyXG5cdG9uQ2xvc2UoKSB7XHJcblx0XHRjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xyXG5cdH1cclxufVxyXG5cclxuXHJcbmNsYXNzIFNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHRwbHVnaW46IE1hdHJpeE9wZXJhdGlvbnNQbHVnaW47XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IE1hdHJpeE9wZXJhdGlvbnNQbHVnaW4pIHtcclxuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdH1cclxuXHJcblx0ZGlzcGxheSgpOiB2b2lkIHtcclxuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdNYXRyaXggQ2FsY3VsYXRvciAtIFNldHRpbmdzJyB9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1B5dGhvbiBwYXRoJylcclxuXHRcdFx0LnNldERlc2MoJ1BhdGggdG8geW91ciBweXRob24zIGZpbGUgd2l0aCByZXF1aXJlZCBwYWNrYWdlcyAoc2VlIFJFQURNRS5tZCknKVxyXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ3BhdGgnKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5weXRob25QYXRoKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnB5dGhvblBhdGggPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4ucHlzaGVsbC5raWxsKCk7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5ydW5fcHlzaGVsbCgpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ0NvbW1hbmQgZmlsZScpXHJcblx0XHRcdC5zZXREZXNjKCdQYXRoIHRvIGZpbGUgd2l0aCB5b3VyIGN1c3RvbSBMYVRlWCBjb21tYW5kcyAoXFxcXG5ld2NvbW1hbmQpJylcclxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdwYXRoJylcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY29tbWFuZHMpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuY29tbWFuZHMgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4ucHlzaGVsbC5raWxsKCk7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5ydW5fcHlzaGVsbCgpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHR9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjog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
